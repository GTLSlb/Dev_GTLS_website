name: Mock Deployment

# Add permissions at the workflow level
permissions:
  contents: read
  actions: write

on:
  push:
    branches: [ mock-staging ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
    steps:
      - name: Get the latest code
        uses: actions/checkout@v4
      
      - name: Check branch
        run: |
          if [ "${{ github.ref }}" != "refs/heads/mock-staging" ]; then
            echo "Workflow can only be run from the 'mock-staging' branch."
            exit 1
          fi

      - name: Setup Node with caching
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, gd
          coverage: none

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Check for build cache
        id: cache-check
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            public/build/
            bootstrap/cache/
          key: build-cache-${{ hashFiles('**/composer.lock', '**/package-lock.json') }}
          restore-keys: |
            build-cache-

      - name: Authenticate Nova
        run: composer config http-basic.nova.laravel.com Jamalt@gtls.com.au m9CWNGKUiBwleCt6dQ1aVLkGE0w0eDxO2FsdVNa0h3EDHQDbhi

      - name: Install PHP Dependencies
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: composer install --optimize-autoloader --no-dev --ignore-platform-reqs

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Cache Clear
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: php artisan cache:clear

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create deployment package
        run: |
          # Create a clean directory structure for deployment
          mkdir -p deployment
          
          # Copy application files (excluding dev dependencies and unnecessary files)
          rsync -av --exclude='node_modules' \
                   --exclude='.git' \
                   --exclude='.github' \
                   --exclude='tests' \
                   --exclude='.env.example' \
                   --exclude='.gitignore' \
                   --exclude='README.md' \
                   --exclude='package-lock.json' \
                   --exclude='webpack.mix.js' \
                   --exclude='tailwind.config.js' \
                   --exclude='vite.config.js' \
                   . deployment/

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment/
          retention-days: 1

      - name: Upload vendor dependencies
        uses: actions/upload-artifact@v4
        with:
          name: vendor-dependencies
          path: vendor/
          retention-days: 1

      - name: Upload built assets
        uses: actions/upload-artifact@v4
        with:
          name: built-assets
          path: public/build/
          retention-days: 1

  deploy:
    name: Deploy to Mock-Staging
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./

      - name: Download vendor dependencies
        uses: actions/download-artifact@v4
        with:
          name: vendor-dependencies
          path: vendor/

      - name: Download built assets
        uses: actions/download-artifact@v4
        with:
          name: built-assets
          path: public/build/

      - name: Verify deployment structure
        run: |
          echo "Deployment package contents:"
          find . -type f -name "*.php" | head -10
          echo "Vendor directory:"
          ls -la vendor/ | head -5
          echo "Built assets:"
          ls -la public/build/ | head -5

      - name: ðŸ“‚ Deploy to mock server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.MOCK_FTP_SERVER }}
          username: ${{ secrets.MOCK_FTP_USERNAME }}
          password: ${{ secrets.MOCK_FTP_PASSWORD }}
          server-dir: /
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/tests/**
            **/.env.example
            **/.gitignore
            **/README.md
            **/package-lock.json
            **/webpack.mix.js
            **/tailwind.config.js
            **/vite.config.js
